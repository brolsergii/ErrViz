package view;

import controller.CTM;
import controller.STM;
import controller.WAV;
import dtw.DTWController;
import dtw.Deletion;
import dtw.Insertion;
import dtw.Substitution;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.io.File;
import java.util.ArrayList;
import javax.naming.SizeLimitExceededException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.StyledDocument;
import model.Sector;
import model.Word;

public class MainForm extends javax.swing.JFrame {

  /** Creates new form MainForm */
  public MainForm() {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBox1 = new javax.swing.JComboBox();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTextPane2 = new javax.swing.JTextPane();
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    jPanel11 = new javax.swing.JPanel();
    jScrollPane6 = new javax.swing.JScrollPane();
    jLabel6 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jButton4 = new javax.swing.JButton();
    jButton5 = new javax.swing.JButton();
    jButton6 = new javax.swing.JButton();
    jPanel2 = new javax.swing.JPanel();
    jSplitPane2 = new javax.swing.JSplitPane();
    jPanel3 = new javax.swing.JPanel();
    jSplitPane3 = new javax.swing.JSplitPane();
    jPanel5 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextPane1 = new javax.swing.JTextPane();
    jPanel6 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jPanel12 = new javax.swing.JPanel();
    jTextPane3 = new javax.swing.JTextPane();
    jPanel4 = new javax.swing.JPanel();
    jSplitPane4 = new javax.swing.JSplitPane();
    jPanel7 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    jTextArea3 = new javax.swing.JTextArea();
    jPanel8 = new javax.swing.JPanel();
    jSplitPane5 = new javax.swing.JSplitPane();
    jPanel9 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    jPanel10 = new javax.swing.JPanel();
    jComboBox2 = new javax.swing.JComboBox();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenu3 = new javax.swing.JMenu();
    jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
    jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
    jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
    jMenuItem5 = new javax.swing.JMenuItem();
    jMenuItem4 = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuItem3 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    jScrollPane2.setViewportView(jTextPane2);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    jSplitPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    jSplitPane1.setDividerSize(2);
    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane1.setResizeWeight(1.0);
    jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jSplitPane1.setMinimumSize(new java.awt.Dimension(116, 100));
    jSplitPane1.setPreferredSize(new java.awt.Dimension(640, 480));

    jPanel1.setMaximumSize(new java.awt.Dimension(32767, 100));
    jPanel1.setPreferredSize(new java.awt.Dimension(629, 100));

    jPanel11.setBackground(new java.awt.Color(242, 0, 240));

    jLabel6.setBackground(new java.awt.Color(245, 36, 26));
    jLabel6.setForeground(new java.awt.Color(14, 249, 14));
    jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel6MouseClicked(evt);
      }
    });
    jScrollPane6.setViewportView(jLabel6);

    javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
    jPanel11.setLayout(jPanel11Layout);
    jPanel11Layout.setHorizontalGroup(
      jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
    );
    jPanel11Layout.setVerticalGroup(
      jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
    );

    jLabel5.setText("<00:00:00/00:00:00>");

    jButton4.setText("Play");
    jButton4.setMaximumSize(new java.awt.Dimension(80, 30));
    jButton4.setMinimumSize(new java.awt.Dimension(80, 30));
    jButton4.setPreferredSize(new java.awt.Dimension(80, 30));
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });

    jButton5.setText("Pause");
    jButton5.setMaximumSize(new java.awt.Dimension(80, 30));
    jButton5.setMinimumSize(new java.awt.Dimension(80, 30));
    jButton5.setPreferredSize(new java.awt.Dimension(80, 30));
    jButton5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton5ActionPerformed(evt);
      }
    });

    jButton6.setText("Stop");
    jButton6.setMaximumSize(new java.awt.Dimension(80, 30));
    jButton6.setMinimumSize(new java.awt.Dimension(80, 30));
    jButton6.setPreferredSize(new java.awt.Dimension(80, 30));
    jButton6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton6ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel5))
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jSplitPane1.setBottomComponent(jPanel1);

    jPanel2.setPreferredSize(new java.awt.Dimension(629, 100));
    jPanel2.setLayout(new java.awt.GridLayout(1, 0));

    jSplitPane2.setDividerLocation(400);
    jSplitPane2.setDividerSize(2);
    jSplitPane2.setResizeWeight(0.5);

    jPanel3.setLayout(new java.awt.GridLayout(1, 0));

    jSplitPane3.setDividerLocation(150);
    jSplitPane3.setDividerSize(2);
    jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane3.setResizeWeight(0.5);

    jLabel1.setText("STM and CTM");

    jTextPane1.setEditable(false);
    jTextPane1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextPane1MouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jTextPane1);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addComponent(jLabel1)
        .addContainerGap(306, Short.MAX_VALUE))
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
    );

    jLabel1.getAccessibleContext().setAccessibleName("STMLabel");

    jSplitPane3.setTopComponent(jPanel5);

    jLabel2.setText("Errors");

    jPanel12.setBackground(new java.awt.Color(254, 254, 254));
    jPanel12.setLayout(new java.awt.BorderLayout());

    jTextPane3.setEditable(false);
    jTextPane3.setFont(new java.awt.Font("FreeMono", 0, 15));
    jTextPane3.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextPane3MouseClicked(evt);
      }
    });
    jPanel12.add(jTextPane3, java.awt.BorderLayout.CENTER);

    jScrollPane5.setViewportView(jPanel12);

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addComponent(jLabel2)
        .addContainerGap(357, Short.MAX_VALUE))
      .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    jPanel6Layout.setVerticalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addComponent(jLabel2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
    );

    jLabel2.getAccessibleContext().setAccessibleName("CTMLabel");

    jSplitPane3.setRightComponent(jPanel6);

    jPanel3.add(jSplitPane3);

    jSplitPane2.setLeftComponent(jPanel3);

    jPanel4.setLayout(new java.awt.GridLayout(1, 0));

    jSplitPane4.setDividerLocation(100);
    jSplitPane4.setDividerSize(2);
    jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane4.setResizeWeight(0.5);

    jLabel3.setText("Extra Information");

    jTextArea3.setColumns(20);
    jTextArea3.setRows(5);
    jScrollPane3.setViewportView(jTextArea3);

    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
    jPanel7.setLayout(jPanel7Layout);
    jPanel7Layout.setHorizontalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel7Layout.createSequentialGroup()
        .addComponent(jLabel3)
        .addContainerGap(106, Short.MAX_VALUE))
      .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
    );
    jPanel7Layout.setVerticalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel7Layout.createSequentialGroup()
        .addComponent(jLabel3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
    );

    jSplitPane4.setTopComponent(jPanel7);

    jPanel8.setLayout(new java.awt.GridLayout(1, 0));

    jSplitPane5.setDividerLocation(100);
    jSplitPane5.setDividerSize(2);
    jSplitPane5.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane5.setResizeWeight(0.5);

    jLabel4.setText("Speakers");

    jList1.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Speaker 1", "Speaker 2", "Speaker 3", "Speaker 4" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane4.setViewportView(jList1);

    javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
    jPanel9.setLayout(jPanel9Layout);
    jPanel9Layout.setHorizontalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel9Layout.createSequentialGroup()
        .addComponent(jLabel4)
        .addContainerGap(163, Short.MAX_VALUE))
      .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
    );
    jPanel9Layout.setVerticalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel9Layout.createSequentialGroup()
        .addComponent(jLabel4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
    );

    jSplitPane5.setTopComponent(jPanel9);

    jPanel10.setMaximumSize(new java.awt.Dimension(400, 90));
    jPanel10.setMinimumSize(new java.awt.Dimension(100, 90));
    jPanel10.setPreferredSize(new java.awt.Dimension(400, 90));

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Errors", "Deletion", "Substitution", "Insertion" }));

    jButton1.setText("< Prev");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setText("Next >");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    jButton3.setText("All");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jComboBox2, 0, 227, Short.MAX_VALUE)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton3)
        .addContainerGap(63, Short.MAX_VALUE))
    );
    jPanel10Layout.setVerticalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButton1)
          .addComponent(jButton2)
          .addComponent(jButton3))
        .addContainerGap(23, Short.MAX_VALUE))
    );

    jButton1.getAccessibleContext().setAccessibleName("buttonPrev");
    jButton2.getAccessibleContext().setAccessibleName("buttonNext");
    jButton3.getAccessibleContext().setAccessibleName("buttonAll");

    jSplitPane5.setRightComponent(jPanel10);

    jPanel8.add(jSplitPane5);

    jSplitPane4.setRightComponent(jPanel8);

    jPanel4.add(jSplitPane4);

    jSplitPane2.setRightComponent(jPanel4);

    jPanel2.add(jSplitPane2);

    jSplitPane1.setLeftComponent(jPanel2);

    getContentPane().add(jSplitPane1);

    jMenu1.setText("File");

    jMenuItem1.setText("New");
    jMenu1.add(jMenuItem1);

    jMenu3.setText("Load");

    jCheckBoxMenuItem1.setText("STM");
    jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxMenuItem1ActionPerformed(evt);
      }
    });
    jMenu3.add(jCheckBoxMenuItem1);

    jCheckBoxMenuItem2.setText("CTM");
    jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxMenuItem2ActionPerformed(evt);
      }
    });
    jMenu3.add(jCheckBoxMenuItem2);

    jCheckBoxMenuItem3.setText("WAV");
    jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxMenuItem3ActionPerformed(evt);
      }
    });
    jMenu3.add(jCheckBoxMenuItem3);

    jMenuItem5.setText("ALL");
    jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem5ActionPerformed(evt);
      }
    });
    jMenu3.add(jMenuItem5);

    jMenu1.add(jMenu3);

    jMenuItem4.setText("Exit");
    jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem4ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem4);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("Help");

    jMenuItem3.setText("User Manual");
    jMenu2.add(jMenuItem3);

    jMenuItem2.setText("About");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2ActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuItem2);

    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
      searchAndHighlightErrors();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPane1MouseClicked
      //highlightSelectedSTMWord();
      clearHighlighting();
      highlightSelectedSTMSegment();
      highlightSelectedCTMWord();
      errorHighlightHandler();
    }//GEN-LAST:event_jTextPane1MouseClicked

    private void jTextPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPane3MouseClicked
      // Basically nothing to do here
    }//GEN-LAST:event_jTextPane3MouseClicked

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
      loadSTM();
      updateLoadCheckBoxes();
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
      loadCTM();
      updateLoadCheckBoxes();
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
      exit();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
      aboutMenu();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
      loadWAV();
      updateLoadCheckBoxes();
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      playFromCurrentTime();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      playStop();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      playPause();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
      loadALL();
      updateLoadCheckBoxes();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
      int pos = evt.getX();
      insertRedLine(pos);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      goToNextError(-1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      goToNextError(1);
    }//GEN-LAST:event_jButton2ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        new MainForm().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JButton jButton6;
  private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
  private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
  private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JComboBox jComboBox2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JList jList1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenuItem jMenuItem5;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel11;
  private javax.swing.JPanel jPanel12;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JPanel jPanel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JSplitPane jSplitPane3;
  private javax.swing.JSplitPane jSplitPane4;
  private javax.swing.JSplitPane jSplitPane5;
  private javax.swing.JTextArea jTextArea3;
  private javax.swing.JTextPane jTextPane1;
  private javax.swing.JTextPane jTextPane2;
  private javax.swing.JTextPane jTextPane3;
  // End of variables declaration//GEN-END:variables

  public void exit() {
    boolean res = OutputHelper.askQuestion("Are you sure you want to quit?", "Exit");
    if (res) {
      System.exit(0);
    }
  }

  public void aboutMenu() {
    AboutForm af = new AboutForm();
    af.setVisible(true);
  }

  @Deprecated
  public void _updateSTM() {
    StyledDocument doc = jTextPane1.getStyledDocument();

    int currentPosition = 0;
    try {
      for (Sector sect : controller.STM.getInstance().getSectors()) {
        for (Word word : sect.getSentence()) {
          word.setPosition(currentPosition);
          doc.insertString(doc.getLength(), word.getWord() + " ", null);
          currentPosition += word.getLength() + 1; // a space between words
        }
        doc.insertString(doc.getLength(), "\n", null);
        currentPosition++;
      }
    } catch (Exception e) {
      System.err.println(e);
    }
  }

  public void updateSTMCTM() {
    StyledDocument doc = jTextPane1.getStyledDocument();
    try {
      doc.remove(0, doc.getLength());
    } catch (BadLocationException e) {
      System.err.println(e);
    }
    if (STM.getInstance().isLoaded() && CTM.getInstance().isLoaded()) {
      int currentPosition = 0; // indexation of the characters in the text
      try {
        for (int index = 0; index < controller.STM.getInstance().getSectors().size(); index++) {
          //for (Sector sect1 : controller.STM.getInstance().getSectors()) {
          Sector sect1 = controller.STM.getInstance().getSectors().get(index);
          Sector sect2 = controller.CTM.getInstance().getSectors().get(index);
          String tmpStr = "" + index + "\n";
          doc.insertString(doc.getLength(), tmpStr, null);
          currentPosition += tmpStr.length();
          for (Word word : sect1.getSentence()) {
            word.setPosition(currentPosition);
            doc.insertString(doc.getLength(), word.getWord() + " ", null);
            currentPosition += word.getLength() + 1; // a space between words
          }
          doc.insertString(doc.getLength(), "\n", null);
          currentPosition++;
          for (Word word : sect2.getSentence()) {
            word.setPosition(currentPosition);
            doc.insertString(doc.getLength(), word.getWord() + " ", null);
            currentPosition += word.getLength() + 1; // a space between words
          }
          doc.insertString(doc.getLength(), "\n", null);
          currentPosition = doc.getLength();
        }
      } catch (Exception e) {
        System.err.println(e);
      }
    } else {
      if (CTM.getInstance().isLoaded()) {
        int currentPosition = 0;
        try {
          for (Word word : CTM.getInstance().getWords()) {
            word.setPosition(currentPosition);
            doc.insertString(doc.getLength(), word.getWord() + " ", null);
            currentPosition += word.getLength() + 1; // a space between words
          }
          doc.insertString(doc.getLength(), "\n", null);
          currentPosition++;
        } catch (Exception e) {
          System.err.println(e);
        }
      }
      if (STM.getInstance().isLoaded()) {
        int currentPosition = 0;
        try {
          for (Sector sect : controller.STM.getInstance().getSectors()) {
            for (Word word : sect.getSentence()) {
              word.setPosition(currentPosition);
              doc.insertString(doc.getLength(), word.getWord() + " ", null);
              currentPosition += word.getLength() + 1; // a space between words
            }
            doc.insertString(doc.getLength(), "\n", null);
            currentPosition++;
          }
        } catch (Exception e) {
          System.err.println(e);
        }
      }
    }
  }

  @Deprecated
  public void highlightSelectedSTMWord() {
    int pos = jTextPane1.getCaretPosition();
    Word selected = controller.STM.getInstance().getWordByPossition(pos);
    if (selected != null) {
      try {
        jTextPane1.getHighlighter().
                addHighlight(selected.getPosition(), selected.getPosition() + selected.getLength(), new DefaultHighlightPainter(Color.red));
        String extraInfo = "";
        extraInfo += "ID: " + selected.getID() + "\n";
        extraInfo += "Word: " + selected.getWord() + "\n";
        extraInfo += "Position: " + selected.getPosition() + "\n";
        extraInfo += "Length: " + selected.getLength() + "\n";
        jTextArea3.setText(extraInfo); // ExtraInfo textArea
      } catch (Exception e) {
        System.err.println(e);
      }
    }
  }

  public void clearHighlighting() {
    jTextPane1.getHighlighter().removeAllHighlights();
  }

  /**
   * Highlight the selected word on the STM textpane and output the extra information about it
   */
  public void highlightSelectedSTMSegment() {
    int pos = jTextPane1.getCaretPosition();
    Sector selected = controller.STM.getInstance().getSectorByPossition(pos);
    if (selected != null) {
      try {
        jTextPane1.getHighlighter().
                addHighlight(selected.getPosition(), selected.getPosition() + selected.getLengthInChars(), new DefaultHighlightPainter(Color.red));
        String extraInfo = "";
        extraInfo += "ID: " + selected.getID() + "\n";
        extraInfo += "Position: " + selected.getPosition() + "\n";
        extraInfo += "Length: " + selected.getLength() + " words \n";
        extraInfo += "Length in chars: " + selected.getLengthInChars() + " characters \n";
        extraInfo += "Time of the begining: " + selected.getBegin() + "\n";
        extraInfo += "Time of the end: " + selected.getEnd() + "\n";
        WAV.getInstance().setCurrentTimeInSec(selected.getBegin()); // Setting the player to the right position
        jTextArea3.setText(extraInfo); // ExtraInfo textArea
      } catch (Exception e) {
        System.err.println(e);
      }
    }
  }

  /**
   * Highlight the selected word on the CTM textpane and output the extra information about it
   */
  public void highlightSelectedCTMWord() {
    int pos = jTextPane1.getCaretPosition();
    Word selected = controller.CTM.getInstance().getWordByPossition(pos);
    if (selected != null) {
      try {
        jTextPane1.getHighlighter().
                addHighlight(selected.getPosition(), selected.getPosition() + selected.getLength(), new DefaultHighlightPainter(Color.red));
        String extraInfo = "";
        extraInfo += "ID: " + selected.getID() + "\n";
        extraInfo += "Word: " + selected.getWord() + "\n";
        extraInfo += "Position: " + selected.getPosition() + "\n";
        extraInfo += "Length: " + selected.getLength() + "\n";
        extraInfo += "Time of the begining: " + selected.getBegin() + "\n";
        extraInfo += "Time of the end: " + selected.getEnd() + "\n";
        WAV.getInstance().setCurrentTimeInSec(selected.getBegin()); // Setting the player to the right position
        jTextArea3.setText(extraInfo); // ExtraInfo textArea
      } catch (Exception e) {
        System.err.println(e);
      }
    }
  }

  /* Sector: error highlight helpers */
  public String[] normiliseStringsToEqualSize(String str1, String str2) {
    String[] res = new String[2];
    if (str1.length() == 0) {
      res[0] = new String(new char[str2.length()]).replace('\0', ' ');
      res[1] = str2;
    } else if (str2.length() == 0) {
      res[0] = str1;
      res[1] = new String(new char[str1.length()]).replace('\0', ' ');
    } else {
      if (str1.length() > str2.length()) {
        res[0] = str1;
        int lendif = str1.length() - str2.length();
        res[1] = str2 + new String(new char[lendif]).replace('\0', ' ');
      } else if (str1.length() == str2.length()) {
        res[0] = str1;
        res[1] = str2;
      } else {
        int lendif = str2.length() - str1.length();
        res[0] = str1 + new String(new char[lendif]).replace('\0', ' ');
        res[1] = str2;
      }
    }
    return res;
  }
  /* End sector: error highlight helpers */

  public void errorHighlight(int refID, String REF, String HYP) {
    if (CTM.getInstance().isLoaded() && STM.getInstance().isLoaded()) {
      jTextPane3.getHighlighter().removeAllHighlights();
      String info = "";
      DTWController dtw = new DTWController(refID);
      ArrayList<String> refArrayList = new ArrayList<String>();
      ArrayList<String> hypArrayList = new ArrayList<String>();

      /* Doing DTW calculations  hypSector.getStringSentence()*/
      dtw.DTWCompare(REF, HYP);

      String[] refTokenised = REF.split(" ");
      String[] hypTokenised = HYP.split(" ");
      char[][] analysisMatrix = dtw.getAnalisysMatrix();
      for (int i = 1; i < analysisMatrix.length; i++) {
        for (int j = 1; j < analysisMatrix[0].length; j++) {
          String[] normalisedStrings = new String[2];
          switch (analysisMatrix[i][j]) {
            case 's': {
              normalisedStrings = normiliseStringsToEqualSize(refTokenised[i - 1], hypTokenised[j - 1]);
              break;
            }
            case 'i': {
              normalisedStrings = normiliseStringsToEqualSize("", hypTokenised[j - 1]);
              break;
            }
            case 'd': {
              normalisedStrings = normiliseStringsToEqualSize(refTokenised[i - 1], "");
              break;
            }
          }
          if (normalisedStrings[0] != null && normalisedStrings[1] != null) {
            refArrayList.add(normalisedStrings[0]);
            hypArrayList.add(normalisedStrings[1]);
          }
        }
      }
      String[] refNormalisedTokenised = (String[]) refArrayList.toArray(new String[1]);
      String[] hypNormalisedTokenised = (String[]) hypArrayList.toArray(new String[1]);
      int[] refPositions = new int[refNormalisedTokenised.length];
      int[] hypPositions = new int[hypNormalisedTokenised.length];
      int currentPos = 6; // "REF : "
      String refSentenceNormalisedTokenised = "";
      int index = 0;
      for (String tmpStr : refNormalisedTokenised) {
        refSentenceNormalisedTokenised += tmpStr + " ";
        refPositions[index] = currentPos;
        index++;
        currentPos += 1 + tmpStr.length();
      }
      //refSentenceNormalisedTokenised = refSentenceNormalisedTokenised.trim();

      currentPos += 7; // " HYP : "
      index = 0;
      String hypSentenceNormalisedTokenised = "";
      for (String tmpStr : hypNormalisedTokenised) {
        hypSentenceNormalisedTokenised += tmpStr + " ";
        hypPositions[index] = currentPos;
        index++;
        currentPos += 1 + tmpStr.length();
      }
      // hypSentenceNormalisedTokenised = hypSentenceNormalisedTokenised.trim();
        /* Output the results of normalisation */
      info += "REF : " + refSentenceNormalisedTokenised + "\n";
      info += "HYP : " + hypSentenceNormalisedTokenised + "\n";

      /* Errors text messages */
      for (dtw.Error err : dtw.getErrors()) {
        info += err + "\n";
      }

      jTextPane3.setText(info);
      try {
        for (int i = 0; i < refNormalisedTokenised.length; i++) {
          String refStr = refNormalisedTokenised[i].trim();
          String hypStr = hypNormalisedTokenised[i].trim();
          if (refStr.isEmpty()) {
            jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Insertion.getColor()));
            jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Insertion.getColor()));
          } else if (hypStr.isEmpty()) {
            jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Deletion.getColor()));
            jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Deletion.getColor()));
          } else if (!hypStr.equals(refStr)) {
            jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Substitution.getColor()));
            jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Substitution.getColor()));
          }
        }
      } catch (Exception ex) {
        System.err.println(ex);
      }
    }
  }

  public void errorHighlightHandler() {
    if (CTM.getInstance().isLoaded() && STM.getInstance().isLoaded()) {
      int pos = jTextPane1.getCaretPosition();
      Word selectedWord = controller.CTM.getInstance().getWordByPossition(pos);
      Sector hypSector = controller.CTM.getInstance().getSectorByWord(selectedWord);
      Sector selectedSector = controller.STM.getInstance().getSectorByPossition(pos);
      jTextPane3.getHighlighter().removeAllHighlights();
      String info = "";
      DTWController dtw = new DTWController(selectedSector.getID());
      ArrayList<String> refArrayList = new ArrayList<String>();
      ArrayList<String> hypArrayList = new ArrayList<String>();
      if (selectedSector != null && hypSector != null) {
        /* Doing DTW calculations */
        dtw.DTWCompare(selectedSector.getStringSentence(), hypSector.getStringSentence());

        /* Setting the current error position */
        controller.Error.getInstance().setPositionBySectorID(selectedSector.getID());

        String[] refTokenised = selectedSector.getStringSentence().split(" ");
        String[] hypTokenised = hypSector.getStringSentence().split(" ");
        char[][] analysisMatrix = dtw.getAnalisysMatrix();
        for (int i = 1; i < analysisMatrix.length; i++) {
          for (int j = 1; j < analysisMatrix[0].length; j++) {
            String[] normalisedStrings = new String[2];
            switch (analysisMatrix[i][j]) {
              case 's': {
                normalisedStrings = normiliseStringsToEqualSize(refTokenised[i - 1], hypTokenised[j - 1]);
                break;
              }
              case 'i': {
                normalisedStrings = normiliseStringsToEqualSize("", hypTokenised[j - 1]);
                break;
              }
              case 'd': {
                normalisedStrings = normiliseStringsToEqualSize(refTokenised[i - 1], "");
                break;
              }
            }
            if (normalisedStrings[0] != null && normalisedStrings[1] != null) {
              refArrayList.add(normalisedStrings[0]);
              hypArrayList.add(normalisedStrings[1]);
            }
          }
        }
        String[] refNormalisedTokenised = (String[]) refArrayList.toArray(new String[1]);
        String[] hypNormalisedTokenised = (String[]) hypArrayList.toArray(new String[1]);
        int[] refPositions = new int[refNormalisedTokenised.length];
        int[] hypPositions = new int[hypNormalisedTokenised.length];
        int currentPos = 6; // "REF : "
        String refSentenceNormalisedTokenised = "";
        int index = 0;
        for (String tmpStr : refNormalisedTokenised) {
          refSentenceNormalisedTokenised += tmpStr + " ";
          refPositions[index] = currentPos;
          index++;
          currentPos += 1 + tmpStr.length();
        }
        //refSentenceNormalisedTokenised = refSentenceNormalisedTokenised.trim();

        currentPos += 7; // " HYP : "
        index = 0;
        String hypSentenceNormalisedTokenised = "";
        for (String tmpStr : hypNormalisedTokenised) {
          hypSentenceNormalisedTokenised += tmpStr + " ";
          hypPositions[index] = currentPos;
          index++;
          currentPos += 1 + tmpStr.length();
        }
        // hypSentenceNormalisedTokenised = hypSentenceNormalisedTokenised.trim();
        /* Output the results of normalisation */
        info += "REF : " + refSentenceNormalisedTokenised + "\n";
        info += "HYP : " + hypSentenceNormalisedTokenised + "\n";

        /* Errors text messages */
        for (dtw.Error err : dtw.getErrors()) {
          info += err + "\n";
        }

        jTextPane3.setText(info);
        try {
          for (int i = 0; i < refNormalisedTokenised.length; i++) {
            String refStr = refNormalisedTokenised[i].trim();
            String hypStr = hypNormalisedTokenised[i].trim();
            if (refStr.isEmpty()) {
              jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Insertion.getColor()));
              jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Insertion.getColor()));
            } else if (hypStr.isEmpty()) {
              jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Deletion.getColor()));
              jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Deletion.getColor()));
            } else if (!hypStr.equals(refStr)) {
              jTextPane3.getHighlighter().addHighlight(refPositions[i], refPositions[i] + refNormalisedTokenised[i].length(), new DefaultHighlightPainter(Substitution.getColor()));
              jTextPane3.getHighlighter().addHighlight(hypPositions[i], hypPositions[i] + hypNormalisedTokenised[i].length(), new DefaultHighlightPainter(Substitution.getColor()));
            }
          }
        } catch (Exception ex) {
          System.err.println(ex);
        }
      }
    }
  }

  public void updateLoadCheckBoxes() {
    jCheckBoxMenuItem1.setState(false);
    jCheckBoxMenuItem2.setState(false);
    jCheckBoxMenuItem3.setState(false);
    if (STM.getInstance().isLoaded()) {
      jCheckBoxMenuItem1.setState(true);
    }
    if (CTM.getInstance().isLoaded()) {
      jCheckBoxMenuItem2.setState(true);
    }
    if (WAV.getInstance().isLoaded()) {
      jCheckBoxMenuItem3.setState(true);
    }
  }

  /**
   * Check if both STM and CTM files are loaded. If this is true, perform a 
   * segmentation of the CTM file.
   */
  public void checkForCTMandSTM() {
    if (STM.getInstance().isLoaded() && CTM.getInstance().isLoaded()) {
      try {
        CTM.getInstance().doSegmentation();
        controller.Error.getInstance().lookForErrors(STM.getInstance().getSectors(), CTM.getInstance().getSectors());
      } catch (SizeLimitExceededException ex) {
        ex.printStackTrace();
      }
    }
  }

  public void loadCTM() {
    final JFileChooser fc = new JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file = fc.getSelectedFile();
      //OutputHelper.showErrorMessage(file.getPath(), "fileName");
      CTM.getInstance().load(file.getPath());
      setFileTitle(file.getName());
      checkForCTMandSTM();
      updateSTMCTM();
    }
  }

  public void loadSTM() {
    final JFileChooser fc = new JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file = fc.getSelectedFile();
      //OutputHelper.showErrorMessage(file.getPath(), "fileName");
      STM.getInstance().load(file.getPath());
      setFileTitle(file.getName());
      checkForCTMandSTM();
      updateSTMCTM();
    }
  }

  public void loadWAV() {
    final JFileChooser fc = new JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file = fc.getSelectedFile();
      controller.WAV.getInstance().load(file.getPath());
      WAV.getInstance().setMainForm(this);
      setFileTitle(file.getName());
      setTimerLabel(0, WAV.getInstance().getOverralLength());
      //loadSonograme();
    }
  }

  public void loadALL() {
    final JFileChooser fc = new JFileChooser();
    fc.setMultiSelectionEnabled(true);
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File[] files = fc.getSelectedFiles();
      for (File file : files) {
        String extension = "";
        int i = file.getName().lastIndexOf('.');
        if (i > 0) {
          extension = file.getName().substring(i + 1).toLowerCase();
        }
        if (extension.equals("stm")) {
          STM.getInstance().load(file.getPath());
          setFileTitle(file.getName());
          checkForCTMandSTM();
          updateSTMCTM();
        }
        if (extension.equals("ctm")) {
          CTM.getInstance().load(file.getPath());
          setFileTitle(file.getName());
          checkForCTMandSTM();
          updateSTMCTM();
        }
        if (extension.equals("wav")) {
          controller.WAV.getInstance().load(file.getPath());
          WAV.getInstance().setMainForm(this);
          setFileTitle(file.getName());
          setTimerLabel(0, WAV.getInstance().getOverralLength());
          //loadSonograme();
        }
      }
    }
  }

  public void loadSonograme() {
    String image = WAV.getInstance().getSonogramme();
    Image imi = (new ImageIcon(image)).getImage();
    //Image img = WAV.getInstance().getWavFile();
    Rectangle r = this.jLabel6.getBounds();
    r.width = WAV.getInstance().getWavFile().getImageWidth();
    //r.height = WAV.getInstance().getWavFile().getImageHeigh();
    this.jLabel6.setBounds(r);
    //this.scrollPane1.setBounds(r);
    this.jLabel6.setIcon(new ImageIcon(imi));
    this.jLabel6.setBackground(Color.GREEN);
    this.jScrollPane6.getVerticalScrollBar().setValue(this.jScrollPane6.getVerticalScrollBar().getMaximum());
    this.jScrollPane6.getVerticalScrollBar().setValue(50);
    System.out.println(this.jScrollPane6.getVerticalScrollBar().getValue());
    System.out.println(this.jScrollPane6.getVerticalScrollBar().getMaximum());
    System.out.println(this.jScrollPane6.getVerticalScrollBar().getMinimum());
    //this.validate();
    //System.out.println("La largeur de l'image est : " + WAV.getInstance().getWavFile().getImageWidth() + " pixels");
  }

  public void setFileTitle(String fullFileName) {
    String fileNames[] = fullFileName.split("\\.");
    this.setTitle("Current file : " + fileNames[0]);
  }

  public void playFromCurrentTime() {
    if (!WAV.getInstance().getPlayer().isPlaying()) {
      WAV.getInstance().getPlayer().playFrom(WAV.getInstance().getCurrentTimeInSec());
      WAV.getInstance().startCounter();
    }
  }

  public void playStop() {
    if (WAV.getInstance().getPlayer().isPlaying()) {
      WAV.getInstance().stopCounter();
      WAV.getInstance().getPlayer().stop();
      WAV.getInstance().setCurrentTimeInSec(0);
    }
  }

  public void playPause() {
    if (WAV.getInstance().getPlayer().isPlaying()) {
      WAV.getInstance().stopCounter();
      WAV.getInstance().getPlayer().stop();
    }
  }

  public void insertRedLine(int pos) {
    //this.jLabel6.repaint();
    String image = WAV.getInstance().getWavFile().getImgPath();
    Image imi = (new ImageIcon(image)).getImage();
    this.jLabel6.setIcon(new ImageIcon(imi));

    int time = WAV.getInstance().getWavFile().getTimeCurrentPostion(pos);
    //System.out.println("Le coordonnes x =" + pos + " pixél ****** Clicque au temps t = " + time + " s");
    Graphics2D gr = (Graphics2D) this.jLabel6.getGraphics();
    //gr.scale(1, (double) jPanel11.getHeight()/(double) WAV.getInstance().getWavFile().getImageHeigh());
    gr.setPaint(Color.RED);
    //gr.drawLine(0, pos, WAV.getInstance().getWavFile().getImageHeigh(), pos);
    gr.draw(new Line2D.Double(pos, 0, pos, WAV.getInstance().getWavFile().getImageHeigh()));
    this.playPause();
    WAV.getInstance().setCurrentTimeInSec(time);
    this.playFromCurrentTime();
  }

  public void insertRedLineFromTime(int time) {
    //this.jLabel6.repaint();
    String image = WAV.getInstance().getWavFile().getImgPath();
    Image imi = (new ImageIcon(image)).getImage();
    this.jLabel6.setIcon(new ImageIcon(imi));

    int pos = WAV.getInstance().getWavFile().getPositionByTime(time);
    //System.out.println("Le coordonnes x =" + pos + " pixél ****** Clicque au temps t = " + time + " s");
    Graphics2D gr = (Graphics2D) this.jLabel6.getGraphics();
    //gr.scale(1, (double) jPanel11.getHeight()/(double) WAV.getInstance().getWavFile().getImageHeigh());
    gr.setPaint(Color.RED);
    //gr.drawLine(0, pos, WAV.getInstance().getWavFile().getImageHeigh(), pos);
    gr.draw(new Line2D.Double(pos, 0, pos, WAV.getInstance().getWavFile().getImageHeigh()));
    //WAV.getInstance().setCurrentTimeInSec(time);
  }

  public void setTimerLabel(double currentTime, double overralTime) {
    int overralHours = ((int) overralTime) / 3600;
    int overralMinutes = (((int) overralTime) / 60) % 60;
    int overralSeconds = ((int) overralTime) % 60;
    String overralMinutesStr = (overralMinutes < 10) ? "0" + overralMinutes : "" + overralMinutes;
    String overralSecondsStr = (overralSeconds < 10) ? "0" + overralSeconds : "" + overralSeconds;
    String ovTime = "" + overralHours + ":" + overralMinutesStr + ":" + overralSecondsStr;
    int currentHours = ((int) currentTime) / 3600;
    int currentMinutes = (((int) currentTime) / 60) % 60;
    int currentSeconds = ((int) currentTime) % 60;
    String currentMinutesStr = (currentMinutes < 10) ? "0" + currentMinutes : "" + currentMinutes;
    String currentSecondsStr = (currentSeconds < 10) ? "0" + currentSeconds : "" + currentSeconds;
    String cuTime = "" + currentHours + ":" + currentMinutesStr + ":" + currentSecondsStr;
    jLabel5.setText("<" + cuTime + "/" + ovTime + ">");
  }

  /* Error search highlighting area */
  private void highlightInsertion(dtw.Error dtwErr) {
    try {
      int secPos = STM.getInstance().getSectorPositionInTheListByID(dtwErr.segId);
      model.Sector secToHighlight = CTM.getInstance().getSectors().get(secPos);
      model.Word wordToHighlight = secToHighlight.getSentence().get(dtwErr.j);
      jTextPane1.getHighlighter().
              addHighlight(wordToHighlight.getPosition(), wordToHighlight.getPosition() + wordToHighlight.getLength(), new DefaultHighlightPainter(dtw.Insertion.getColor()));
    } catch (Exception ex) {
      System.err.println(ex);
    }
  }

  private void highlightDeletion(dtw.Error dtwErr) {
    try {
      model.Sector secToHighlight = STM.getInstance().getSectorByID(dtwErr.segId);
      model.Word wordToHighlight = secToHighlight.getSentence().get(dtwErr.i);
      jTextPane1.getHighlighter().
              addHighlight(wordToHighlight.getPosition(), wordToHighlight.getPosition() + wordToHighlight.getLength(), new DefaultHighlightPainter(dtw.Deletion.getColor()));
    } catch (Exception ex) {
      System.err.println(ex);
    }
  }

  private void highlightSubstitution(dtw.Error dtwErr) {
    try {
      int secPos = STM.getInstance().getSectorPositionInTheListByID(dtwErr.segId);
      model.Sector secToHighlight1 = CTM.getInstance().getSectors().get(secPos);
      model.Sector secToHighlight2 = STM.getInstance().getSectorByID(dtwErr.segId);

      model.Word wordToHighlight1 = secToHighlight1.getSentence().get(dtwErr.j);
      jTextPane1.getHighlighter().
              addHighlight(wordToHighlight1.getPosition(), wordToHighlight1.getPosition() + wordToHighlight1.getLength(), new DefaultHighlightPainter(dtw.Substitution.getColor()));

      model.Word wordToHighlight2 = secToHighlight2.getSentence().get(dtwErr.i);
      jTextPane1.getHighlighter().
              addHighlight(wordToHighlight2.getPosition(), wordToHighlight2.getPosition() + wordToHighlight2.getLength(), new DefaultHighlightPainter(dtw.Substitution.getColor()));

    } catch (Exception ex) {
      System.err.println(ex);
    }
  }

  public void searchAndHighlightErrors() {
    if (STM.getInstance().isLoaded() && CTM.getInstance().isLoaded()) {
      try {
        controller.Error.getInstance().lookForErrors(STM.getInstance().getSectors(), CTM.getInstance().getSectors());
        jTextPane1.getHighlighter().removeAllHighlights();
        String comboBoxValue = jComboBox2.getSelectedItem().toString();
        int searchType = 0;
        if (comboBoxValue.equals("All Errors")) {
          searchType = 1;
        } else if (comboBoxValue.equals("Deletion")) {
          searchType = 2;
        } else if (comboBoxValue.equals("Substitution")) {
          searchType = 3;
        } else if (comboBoxValue.equals("Insertion")) {
          searchType = 4;
        }
        int numDel = 0;
        int numSub = 0;
        int numIns = 0;

        String tmpStr = "";
        String tmpStr2 = "";
        for (dtw.Error dtwErr : controller.Error.getInstance().getErrors()) {
          if (dtwErr instanceof dtw.Insertion) {
            numIns++;
            if (searchType == 4) {
              tmpStr += dtwErr.toString() + "\n";
              highlightInsertion(dtwErr);
            }
          }
          if (dtwErr instanceof dtw.Deletion) {
            numDel++;
            if (searchType == 2) {
              tmpStr += dtwErr.toString() + "\n";
              highlightDeletion(dtwErr);
            }
          }
          if (dtwErr instanceof dtw.Substitution) {
            numSub++;
            if (searchType == 3) {
              tmpStr += dtwErr.toString() + "\n";
              highlightSubstitution(dtwErr);
            }
          }
          if (searchType == 1) {
            if (dtwErr instanceof dtw.Insertion) {
              highlightInsertion(dtwErr);
            } else if (dtwErr instanceof dtw.Deletion) {
              highlightDeletion(dtwErr);
            } else if (dtwErr instanceof dtw.Substitution) {
              highlightSubstitution(dtwErr);
            }
            tmpStr += dtwErr.toString() + "\n";
          }
        }
        tmpStr2 += "Error number = " + (numDel + numSub + numIns) + "\n";
        tmpStr2 += "Deletion number = " + numDel + "\n";
        tmpStr2 += "Insertion number = " + numIns + "\n";
        tmpStr2 += "Substitution number = " + numSub + "\n";
        jTextPane3.setText(tmpStr2 + tmpStr);
      } catch (SizeLimitExceededException ex) {
        System.err.println(ex);
      }
    }
  }
  /* End of error search highlighting area */

  /* Navigation over errors.
   * Direction = -1 if previous
   * Direction = +1 if next
   */
  public void goToNextError(int direction) {
    try {
      controller.Error.getInstance().lookForErrors(STM.getInstance().getSectors(), CTM.getInstance().getSectors());
      jTextPane1.getHighlighter().removeAllHighlights();
      String comboBoxValue = jComboBox2.getSelectedItem().toString();
      int searchType = 0;
      if (comboBoxValue.equals("All Errors")) {
        searchType = 1;
      } else if (comboBoxValue.equals("Deletion")) {
        searchType = 2;
      } else if (comboBoxValue.equals("Substitution")) {
        searchType = 3;
      } else if (comboBoxValue.equals("Insertion")) {
        searchType = 4;
      }
      dtw.Error currentError = controller.Error.getInstance().getCurrentError();
      jTextArea3.setText(currentError.getDetails());
      Sector refSeg = STM.getInstance().getSectorByID(currentError.segId);
      int segIndex = STM.getInstance().getSectors().indexOf(refSeg);
      Sector hypSeg = CTM.getInstance().getSectors().get(segIndex);
      errorHighlight(currentError.segId, refSeg.getStringSentence(), hypSeg.getStringSentence());
      Sector tmpRefSeg = controller.STM.getInstance().getSectorByID(currentError.segId);
      try {
        jTextPane1.getHighlighter().addHighlight(tmpRefSeg.getPosition(), tmpRefSeg.getPosition() + tmpRefSeg.getLengthInChars(), new DefaultHighlightPainter(Color.RED));
        jTextPane1.moveCaretPosition(tmpRefSeg.getPosition());
      } catch (BadLocationException ex) {
        System.err.println(ex);
      }
      switch (searchType) {
        case 1: {
          if (direction > 0) {
            controller.Error.getInstance().goNextError();
          } else {
            controller.Error.getInstance().goPrevError();
          }
          break;
        }
        case 2: {
          do {
            if (direction > 0) {
              controller.Error.getInstance().goNextError();
            } else {
              controller.Error.getInstance().goPrevError();
            }
          } while (!(controller.Error.getInstance().getCurrentError() instanceof dtw.Deletion));
          break;
        }
        case 3: {
          do {
            if (direction > 0) {
              controller.Error.getInstance().goNextError();
            } else {
              controller.Error.getInstance().goPrevError();
            }
          } while (!(controller.Error.getInstance().getCurrentError() instanceof dtw.Substitution));
          break;
        }
        case 4: {
          do {
            if (direction > 0) {
              controller.Error.getInstance().goNextError();
            } else {
              controller.Error.getInstance().goPrevError();
            }
          } while (!(controller.Error.getInstance().getCurrentError() instanceof dtw.Insertion));
          break;
        }
      }
    } catch (SizeLimitExceededException ex) {
      System.err.println(ex);
    }
  }
  /* End navigation over errors */
}
